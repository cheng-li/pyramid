# path to input train data
input.trainData=/Users/chengli/Datasets/scene/data_sets/train

# path to input test data
input.testData=/Users/chengli/Datasets/scene/data_sets/test

# matrix format; can be dense, sparse_random or sparse_sequential
# use sparse format for text data with large number of sparse features to save memory
# use dense or sparse_random for boosting
# use dense or sparse_sequential for logistic regression
input.matrixType=dense

# folder for the program output
output=/Users/chengli/tmp/out

# train the model on the training set
train=true

# test the model on the test set
test=true

# number of components in the CBM
mixture.numComponents=20

# type of the multi-class classifier in CBM; supported type: lr (for Logistic Regression) or boost (for Gradient Boosting)
mixture.multiClassClassifierType=lr

# type of the binary classifier in CBM; supported type: lr or boost
mixture.binaryClassifierType=lr

# whether to start training CBM from an existing model, if such model exists in the output folder
# true, or false, or auto
# false = alway start from scratch
# true = first load back an existing model, and then continue training
# auto = detect whether there is an existing model in the output folder, if yes, load it back and keep training; if not, start from scratch
train.warmStart=false

# whether to initialize CBM with BM; if true, 10 BM models with be trained and the best one will be kept as the initialization of CBM
train.initialize=true

########## EM ###########
# number of EM iterations
# running all the way until convergence may overfit the training data
# sometimes early stopping can improve the test performance
em.numIterations=10

####### logistic regression #####
# Gaussian prior variance for LR weights. Small values indicate strong regularizations
lr.multiClassVariance=1.0
lr.binaryVariance=1.0

############# boosting #########
# how many boosting iterations to run (i.e., number of trees to add) in each M step of the EM loop
boost.numIterationsBinary=20
boost.numIterationsMultiClass=20

# number of leaves in the regression tree
boost.numLeavesBinary=5
boost.numLeavesMultiClass=5

# shrinkage of boosting
boost.shrinkageBinary=0.1
boost.shrinkageMultiClass=0.1

######### prediction ########

# whether to allow empty subset to be predicted; 
# true = allow empty prediction
# false = do not allow empty prediction
# auto = allow empty prediction only if the training set contains empty label sets
predict.allowEmpty=auto

# to achieve optimal prediction under which target measure 
# subsetAccuracy or instanceFMeasure
predict.target=subsetAccuracy

# when generating prediction reports for individual label probabilities, labels with probabilities below the threshold will not be displayed
# This only make the reports more readable; it does not affect the actual prediction in any way.
report.labelProbThreshold=0.2

# the internal Java class name for this application. 
# users do not need to modify this.
pyramid.class=App5