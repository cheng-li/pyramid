########## IO ###########
# folder for all outputs
output.folder=/huge1/people/chengli/projects/pyramid/archives/app3/ohsumed_20000/1
# the name of the train folder
output.trainFolder=train
# the name of the test folder
output.testFolder=test
# the full name of the log file
# if not given, the log will be printed to the console
output.log=

######### functions ##########
# use two queries to specify training set and test set
# the query string should be the string after the top level "query":
# For example, if the curl command is
# curl -XGET "http://localhost:9200/ohsumed_20000/document/_search" -d'{"query":{"filtered":{"query":{"match_all":{}},"filter":{"term":{"split":"train"}}}}}'
# then the query string should be {"filtered":{"query":{"match_all":{}},"filter":{"term":{"split":"train"}}}}
# make sure the curly braces match

# the elasticsearch query string for matching training documents
train.splitQuery={"bool": {"must": {"match_all": {}},"filter": {"term": {"split": "train"}}}}
# the elasticsearch query string for matching test documents
test.splitQuery={"bool": {"must": {"match_all": {}},"filter": {"term": {"split": "test"}}}}

# generate training set
createTrainSet=true
# generate test set
createTestSet=true
# train model; produce reports for training set; train should be run prior to test
train=true
# after "train", run "tune" to search for the best threshold for the target evaluation measure
# tuning is necessary if predict.target=macroFMeasure
tune=true
# load model; produce reports for test set
test=true


########## index ########## 
index.indexName=ohsumed_20000
index.clusterName=fijielasticsearch
index.documentType=document
# node or transport
index.clientType=node
# set hosts if clientType=transport
index.hosts=fiji11,fiji12
# set ports if clientType=transport
index.ports=9300,9300



######### feature ########## 
train.feature.useInitialFeatures=true
train.feature.featureFieldPrefix=feature
train.feature.categFeature.filter=true
train.feature.categFeature.percentThreshold=0.1
train.feature.ngram.n=1,2
train.feature.ngram.minDf=10
train.feature.ngram.slop=0,1
train.feature.ngram.extractionFields=body
# can be es_original, frequency, binary, tfifl
# tfifl = term frequency normalized by field length;
# to use tfifl, users should manually store the field length in a separate field named <field_name>_field_length, e.g., body_field_length
train.feature.ngram.matchScoreType=es_original

# whether to perform feature selection for ngrams
train.feature.ngram.selection=false
# if selection=true, how many ngrams to keep for each label
train.feature.ngram.selectPerLabel=50

train.feature.missingValue=false

# whether to add external ngrams from a file
# if true, user specified ngrams will be added to the feature matrix
train.feature.addExternalNgrams=true
# the file containing user specified ngrams, one ngram per line
# users do not need to manually analyze (tokenize, stem, filter) these ngrams, but need to specify the right analyzer below
train.feature.externalNgramFile=/home/chengli/experiments/pyramid/application/app3/configs/ohsumed_20000/ngramlist

# whether to filter ngram candidates based on a list of unigram keywords 
# if true, only ngrams (n>1) containing at least one of the keywords will be kept
train.feature.filterNgramsByKeyWords=true
# the file containing unigram keywords, one unigram per line
# users do not need to manually analyze (tokenize, stem, filter) these unigrams, but need to specify the right analyzer below
train.feature.filterNgrams.keyWordsFile=/home/chengli/experiments/pyramid/application/app3/configs/ohsumed_20000/keywords

# the program will use this analyzer to analyze (tokenize, stem, filter) the user provided ngrams and unigram keywords
# this analyzer should be the same as the one specified in the Elasticsearch body field mapping
train.feature.analyzer=english

# whether to filter ngram candidates by a regular expression
# if true, ngrams matching the regular expression will be removed
train.feature.filterNgramsByRegex=false

# the regular expression used to filter ngrams
# for example, \\d will remove a unigram if it is a digit
# users can specify ngram length in the regular expression using the number of spaces (an ngram has n-1 spaces)
# to help users understand and test the regular expression matching function, pyramid provides another application called "regex"
# users are encouraged to test their regular expression first with "regex"
train.feature.filterNgrams.regex=\\d

# whether to consider code description as features
train.feature.useCodeDescription=false
# the file containing code descriptions, each line in the file describes one code
train.feature.codeDesc.File=
# the program will use this analyzer to analyze (tokenize, stem, filter) the code descriptions
# this analyzer should be the same as the one specified in the Elasticsearch body field mapping
train.feature.codeDesc.analyzer=english
# which field we should match code descriptions against to compute matching scores
train.feature.codeDesc.matchField=body
# As most of the documents would match at least one word in the code description, direct partial matching results in dense features.
# We provide a threshold specifying the minimum percentage of the words in the code description the document must match. 
# Matching below the threshold will be discarded. 
# For example, if the description has 10 terms and a document matches 2 terms and minMatchPercentage=30, the matching score will be set to 0.
# The implementation uses minimum should match query + constance score
# see https://www.elastic.co/guide/en/elasticsearch/guide/current/ignoring-tfidf.html
# Matching k out of n words will gives a score of k^2/n^1.5 
# For boosting classifiers, we can simply interpret the score as k as monotonic transformations do no matter
train.feature.codeDesc.minMatchPercentage=20

########## labels ##############
# the elasticsearch index field for labels
train.label.field=real_labels
train.label.filter=false
train.label.filter.prefix=foo
# encode labels in frequency or alphabetical order
train.label.order=frequency

############# training algorithm hyper parameters ##########
# start with current model; train for more iterations
train.warmStart=false
train.usePrior=true
# the max number of iterations allowed
train.numIterations=100
train.numLeaves=5
train.learningRate=0.1
train.minDataPerLeaf=3
train.numSplitIntervals=100
train.showTrainProgress=true
train.showTestProgress=true
train.showProgress.interval=5
# if earlyStop=true, the program will use test set performance (KL divergence) on each label to automatically decide when to stop training for that label
# make sure to have test set created before training starts and set train.showTestProgress=true
train.earlyStop=true
# the training will never stop before it reaches this minimum number of iterations
train.earlyStop.minIterations=20
# if the test performance for a label does not improve significantly after k successive evaluations, the training on that label will stop
# for example, if train.showProgress.interval=5 and train.earlyStop.patience=2, that means to stop if no significant improvement in 10 iterations
train.earlyStop.patience=2
# for an improvement to be significant, the absolute change must be bigger than this value
train.earlyStop.absoluteChange=0.1
# for an improvement to be significant, the relative change must be bigger than this value; 0.1 means 10%
train.earlyStop.relativeChange=0.1
train.generateReports=true

############ tune ###########
# whether to use train or test data to tune the threshold
tune.data=train

# The F-measure was derived so that F_\beta "measures the effectiveness of retrieval with respect to a user who attaches Î² times as much importance to recall as precision"
# Two other commonly used F measures are the F_{2} measure, which weights recall higher than precision, 
# and the F_{0.5} measure, which puts more emphasis on precision than recall. --wikipedia
tune.FMeasure.beta=1

############ predict ##############
# to achieve optimal prediction under which target measure 
# subsetAccuracy, hammingLoss, instanceFMeasure, macroFMeasure
# if prediction.target=macroFMeasure, user should run "tune" after "train"
predict.target=subsetAccuracy

############ report ##################
# the number of important features per class
report.topFeatures.limit=1000
report.rule.limit=10
report.numDocsPerFile=100
report.classProbThreshold=0.4
report.labelSetLimit=10
# whether to show prediction details in Json files
report.showPredictionDetail=true

# the internal Java class name for this application. 
# users do not need to modify this.
pyramid.class=App3